Your task is to write a python application to play a word guessing game. The goal of the game is to automatically guess a word by trying different words until the correct word is found.

The application workflow:
1. Prompt the user to the start the guessing game by asking "Start the guessing game? (y/n)"
2. If the user enters "y", and then prompt the user to enter a word to start the guess.
3. If the user enters "n", then exit the application.
4. If the user enters a word, then send the word to the api and get the response.
5. If the user did not enter a word, then the application will automatically generate a word to start the game.
6. If the response is correct, then print "Correct" and go back to #1.
7. If the response is NOT correct, then automatically generate a new word to guess and send the word to the api and get the response until the correct word is found.

Technical Requirements:
- The application is modularized into functions so that it is easier to maintain and understand.
- call_api function is used call the api and get the response.
The call_api function will make a get request to the api (https://wordle.votee.dev:8000/random) and send parameters guess={guess_word}, size={length of the guess word}, and seed={random number}.		
- generate_initial_word function is used to generate the initial word to start the guess.
The generate_initial_word function will generate a random word with a random length between 1 and 15 letters. 
- analyze_response function is used to analyze the response from the api and updates the absent letters, present letters and correct letters. It will also updates the tracking dictionaries for optimization. 
- generate_next_word function is used to generate the next word to guess based on the current state of the absent, present and correct letters. It should handles repeated letters by respecting their frequency constraints. Avoids repeating previous guesses. 

Output example:
Guess #{guess number}: {guess word}
Absent: {absent letters}
Present: {present letters}
Correct: {correct letters}
Correct Precentage: {correct percentage}%

Word "{guess word}" is correct and guessed in {number of guesses} guesses.

Acceptance Criteria:
- The application will prompt the user to start the guessing game.
- The application should be able to handle user input and interact with the api.
- The application should be able to guess the word correctly.
- The application should be able to handle errors and exceptions.
- The application should be able to handle edge cases.
- The application should be able to handle multiple rounds of guessing when the wants to play again.

api json response example:
[
	{
		"slot": 0,
		"guess": "b",
		"result": "present"
	},
	{
		"slot": 1,
		"guess": "o",
		"result": "present"
	},
	{
		"slot": 2,
		"guess": "b",
		"result": "correct"
	},
	{
		"slot": 3,
		"guess": "b",
		"result": "present"
	},
	{
		"slot": 4,
		"guess": "y",
		"result": "absent"
	}
]

api response definition:
given the word "bobby" as an example, the response slot is the position of the letter in the word, the "guess" is the letter in the word, and the "result" is the result of the guess where "absent" is the letter is not in the word, "present" is the letter is in the word but not in the correct position, and "correct" is the letter is in the correct position.